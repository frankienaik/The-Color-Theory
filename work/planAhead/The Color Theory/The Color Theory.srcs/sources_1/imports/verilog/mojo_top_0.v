/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    output reg spi_miso,
    output reg [3:0] spi_channel,
    output reg avr_rx,
    output reg [23:0] io_led,
    input [4:0] io_button,
    input [23:0] io_dip,
    input rButt,
    input gButt,
    input bButt,
    input cButt,
    input backButt,
    input clearButt,
    input entButt,
    input fsButt,
    input gmButt,
    output reg [0:0] rinLED,
    output reg [0:0] ginLED,
    output reg [0:0] binLED,
    output reg [0:0] cinLED,
    output reg [0:0] routLED,
    output reg [0:0] goutLED,
    output reg [0:0] boutLED,
    output reg [0:0] youtLED,
    output reg [0:0] moutLED,
    output reg [0:0] coutLED,
    output reg [0:0] cIndicator,
    output reg [0:0] idleLED,
    output reg [4:0] timeLED,
    output reg [2:0] livesLED,
    output reg [7:0] led_seg_goal,
    output reg [3:0] led_sel_goal
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_cButt_Cond_out;
  reg [1-1:0] M_cButt_Cond_in;
  button_conditioner_2 cButt_Cond (
    .clk(clk),
    .in(M_cButt_Cond_in),
    .out(M_cButt_Cond_out)
  );
  wire [1-1:0] M_rButt_Cond_out;
  reg [1-1:0] M_rButt_Cond_in;
  button_conditioner_2 rButt_Cond (
    .clk(clk),
    .in(M_rButt_Cond_in),
    .out(M_rButt_Cond_out)
  );
  wire [1-1:0] M_gButt_Cond_out;
  reg [1-1:0] M_gButt_Cond_in;
  button_conditioner_2 gButt_Cond (
    .clk(clk),
    .in(M_gButt_Cond_in),
    .out(M_gButt_Cond_out)
  );
  wire [1-1:0] M_bButt_Cond_out;
  reg [1-1:0] M_bButt_Cond_in;
  button_conditioner_2 bButt_Cond (
    .clk(clk),
    .in(M_bButt_Cond_in),
    .out(M_bButt_Cond_out)
  );
  wire [1-1:0] M_backButt_Cond_out;
  reg [1-1:0] M_backButt_Cond_in;
  button_conditioner_2 backButt_Cond (
    .clk(clk),
    .in(M_backButt_Cond_in),
    .out(M_backButt_Cond_out)
  );
  wire [1-1:0] M_entButt_Cond_out;
  reg [1-1:0] M_entButt_Cond_in;
  button_conditioner_2 entButt_Cond (
    .clk(clk),
    .in(M_entButt_Cond_in),
    .out(M_entButt_Cond_out)
  );
  wire [1-1:0] M_cedge_out;
  reg [1-1:0] M_cedge_in;
  edge_detector_8 cedge (
    .clk(clk),
    .in(M_cedge_in),
    .out(M_cedge_out)
  );
  wire [1-1:0] M_redge_out;
  reg [1-1:0] M_redge_in;
  edge_detector_8 redge (
    .clk(clk),
    .in(M_redge_in),
    .out(M_redge_out)
  );
  wire [1-1:0] M_gedge_out;
  reg [1-1:0] M_gedge_in;
  edge_detector_8 gedge (
    .clk(clk),
    .in(M_gedge_in),
    .out(M_gedge_out)
  );
  wire [1-1:0] M_bedge_out;
  reg [1-1:0] M_bedge_in;
  edge_detector_8 bedge (
    .clk(clk),
    .in(M_bedge_in),
    .out(M_bedge_out)
  );
  wire [1-1:0] M_backedge_out;
  reg [1-1:0] M_backedge_in;
  edge_detector_12 backedge (
    .clk(clk),
    .in(M_backedge_in),
    .out(M_backedge_out)
  );
  wire [1-1:0] M_entedge_out;
  reg [1-1:0] M_entedge_in;
  edge_detector_8 entedge (
    .clk(clk),
    .in(M_entedge_in),
    .out(M_entedge_out)
  );
  reg [0:0] M_uC_d, M_uC_q = 1'h0;
  reg [0:0] M_uR_d, M_uR_q = 1'h0;
  reg [0:0] M_uG_d, M_uG_q = 1'h0;
  reg [0:0] M_uB_d, M_uB_q = 1'h0;
  reg [2:0] M_uIn_d, M_uIn_q = 1'h0;
  reg [2:0] M_gIn_d, M_gIn_q = 1'h0;
  reg [0:0] M_rOut_d, M_rOut_q = 1'h0;
  reg [0:0] M_gOut_d, M_gOut_q = 1'h0;
  reg [0:0] M_bOut_d, M_bOut_q = 1'h0;
  reg [0:0] M_yOut_d, M_yOut_q = 1'h0;
  reg [0:0] M_mOut_d, M_mOut_q = 1'h0;
  reg [0:0] M_cOut_d, M_cOut_q = 1'h0;
  reg [0:0] M_cInOut_d, M_cInOut_q = 1'h0;
  reg [0:0] M_idleOut_d, M_idleOut_q = 1'h0;
  reg [4:0] M_timer_d, M_timer_q = 1'h0;
  reg [4:0] M_startTimer_d, M_startTimer_q = 1'h0;
  reg [7:0] M_timerScore_d, M_timerScore_q = 1'h0;
  reg [7:0] M_score_d, M_score_q = 1'h0;
  reg [2:0] M_lives_d, M_lives_q = 1'h0;
  reg [29:0] M_clock_d, M_clock_q = 1'h0;
  reg [3:0] M_state_id_d, M_state_id_q = 1'h0;
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_14 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  localparam CHOOSE_MODE_state = 6'd0;
  localparam RESET_state = 6'd1;
  localparam USER_TRANSLATE_FREE_state = 6'd2;
  localparam UI_F_state = 6'd3;
  localparam UI_G_state = 6'd4;
  localparam UI_G_START_state = 6'd5;
  localparam DIS_F_state = 6'd6;
  localparam USER_TRANSLATE_state = 6'd7;
  localparam COMP_MUL_state = 6'd8;
  localparam COMP_MUL2_state = 6'd9;
  localparam COMP_ADD_state = 6'd10;
  localparam D_LIFE_state = 6'd11;
  localparam CHECK_LIFE_state = 6'd12;
  localparam COMP_CHECK_state = 6'd13;
  localparam Q_CHECK_state = 6'd14;
  localparam COMP_STATE_R_state = 6'd15;
  localparam COMP_STATE_G_state = 6'd16;
  localparam COMP_STATE_B_state = 6'd17;
  localparam COMP_STATE_Y_state = 6'd18;
  localparam COMP_STATE_M_state = 6'd19;
  localparam COMP_STATE_C_state = 6'd20;
  localparam COMP_STATE_0R_state = 6'd21;
  localparam COMP_STATE_0G_state = 6'd22;
  localparam COMP_STATE_0B_state = 6'd23;
  localparam COMP_STATE_0Y_state = 6'd24;
  localparam COMP_STATE_0M_state = 6'd25;
  localparam COMP_STATE_0C_state = 6'd26;
  localparam DISP_CORRECT1_state = 6'd27;
  localparam DISP_CORRECT2_state = 6'd28;
  localparam CHECK_LVL_state = 6'd29;
  localparam DIS_WAIT_state = 6'd30;
  localparam WAIT_state = 6'd31;
  localparam WAIT_MISTAKE_state = 6'd32;
  localparam END_state = 6'd33;
  localparam END_2_state = 6'd34;
  
  reg [5:0] M_state_d, M_state_q = CHOOSE_MODE_state;
  
  reg [5:0] alufn;
  
  reg [7:0] a;
  
  reg [7:0] b;
  
  reg [7:0] alu;
  
  wire [8-1:0] M_aluI_alu;
  wire [1-1:0] M_aluI_v;
  wire [1-1:0] M_aluI_n;
  wire [1-1:0] M_aluI_z;
  wire [1-1:0] M_aluI_overflow;
  reg [8-1:0] M_aluI_a;
  reg [8-1:0] M_aluI_b;
  reg [6-1:0] M_aluI_alufn;
  alu_8_15 aluI (
    .a(M_aluI_a),
    .b(M_aluI_b),
    .alufn(M_aluI_alufn),
    .alu(M_aluI_alu),
    .v(M_aluI_v),
    .n(M_aluI_n),
    .z(M_aluI_z),
    .overflow(M_aluI_overflow)
  );
  
  wire [4-1:0] M_dec3_out3;
  wire [4-1:0] M_dec3_out2;
  wire [4-1:0] M_dec3_out1;
  wire [4-1:0] M_dec3_out0;
  reg [8-1:0] M_dec3_a;
  decimal3_16 dec3 (
    .a(M_dec3_a),
    .out3(M_dec3_out3),
    .out2(M_dec3_out2),
    .out1(M_dec3_out1),
    .out0(M_dec3_out0)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_uIn_d = M_uIn_q;
    M_cInOut_d = M_cInOut_q;
    M_clock_d = M_clock_q;
    M_bOut_d = M_bOut_q;
    M_uR_d = M_uR_q;
    M_mOut_d = M_mOut_q;
    M_score_d = M_score_q;
    M_uG_d = M_uG_q;
    M_idleOut_d = M_idleOut_q;
    M_cOut_d = M_cOut_q;
    M_state_id_d = M_state_id_q;
    M_uC_d = M_uC_q;
    M_timer_d = M_timer_q;
    M_gOut_d = M_gOut_q;
    M_uB_d = M_uB_q;
    M_lives_d = M_lives_q;
    M_rOut_d = M_rOut_q;
    M_timerScore_d = M_timerScore_q;
    M_startTimer_d = M_startTimer_q;
    M_yOut_d = M_yOut_q;
    M_gIn_d = M_gIn_q;
    
    M_dec3_a = M_score_q;
    a = io_dip[0+7-:8];
    b = io_dip[8+7-:8];
    alufn = io_dip[16+7-:8];
    M_cButt_Cond_in = cButt;
    M_cedge_in = M_cButt_Cond_out;
    M_rButt_Cond_in = rButt;
    M_redge_in = M_rButt_Cond_out;
    M_gButt_Cond_in = gButt;
    M_gedge_in = M_gButt_Cond_out;
    M_bButt_Cond_in = bButt;
    M_bedge_in = M_bButt_Cond_out;
    M_backButt_Cond_in = backButt;
    M_backedge_in = M_backButt_Cond_out;
    M_entButt_Cond_in = entButt;
    M_entedge_in = M_entButt_Cond_out;
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    M_seg_values = {M_dec3_out0, M_dec3_out1, M_dec3_out2, 4'h0};
    led_seg_goal = 8'hff;
    led_sel_goal = 4'hf;
    led_seg_goal = M_seg_seg;
    led_sel_goal = ~M_seg_sel;
    idleLED = M_idleOut_q;
    led = 1'h0;
    timeLED = M_timer_q;
    livesLED = M_lives_q;
    routLED = M_rOut_q;
    goutLED = M_gOut_q;
    boutLED = M_bOut_q;
    youtLED = M_yOut_q;
    moutLED = M_mOut_q;
    coutLED = M_cOut_q;
    cIndicator = M_cInOut_q;
    rinLED = M_uR_q;
    ginLED = M_uG_q;
    binLED = M_uB_q;
    cinLED = M_uC_q;
    M_aluI_a = a;
    M_aluI_b = b;
    M_aluI_alufn = alufn;
    alu = M_aluI_alu;
    
    case (M_state_q)
      CHOOSE_MODE_state: begin
        M_clock_d = M_clock_q + 1'h1;
        if (M_clock_q == 26'h07f2815) begin
          M_rOut_d = M_rOut_q + 1'h1;
        end
        if (M_clock_q == 26'h0fe502a) begin
          M_gOut_d = M_gOut_q + 1'h1;
        end
        if (M_clock_q == 26'h17d783f) begin
          M_bOut_d = M_bOut_q + 1'h1;
        end
        if (M_clock_q == 26'h1fca055) begin
          M_yOut_d = M_yOut_q + 1'h1;
        end
        if (M_clock_q == 26'h27bc86a) begin
          M_mOut_d = M_mOut_q + 1'h1;
        end
        if (M_clock_q == 26'h2faf07f) begin
          M_cOut_d = M_cOut_q + 1'h1;
          M_clock_d = 1'h0;
        end
        if (fsButt == 1'h1) begin
          M_rOut_d = 1'h0;
          M_gOut_d = 1'h0;
          M_bOut_d = 1'h0;
          M_yOut_d = 1'h0;
          M_mOut_d = 1'h0;
          M_cOut_d = 1'h0;
          M_state_d = UI_F_state;
        end
        if (gmButt == 1'h1) begin
          M_rOut_d = 1'h0;
          M_gOut_d = 1'h0;
          M_bOut_d = 1'h0;
          M_yOut_d = 1'h0;
          M_mOut_d = 1'h0;
          M_cOut_d = 1'h0;
          M_state_d = UI_G_START_state;
        end
      end
      UI_F_state: begin
        if (M_redge_out) begin
          M_uR_d = M_uR_q + 1'h1;
        end
        if (M_gedge_out) begin
          M_uG_d = M_uG_q + 1'h1;
        end
        if (M_bedge_out) begin
          M_uB_d = M_uB_q + 1'h1;
        end
        if (M_cedge_out) begin
          M_uC_d = M_uC_q + 1'h1;
        end
        if (clearButt == 1'h1) begin
          M_uR_d = 1'h0;
          M_uG_d = 1'h0;
          M_uB_d = 1'h0;
          M_uC_d = 1'h0;
        end
        if (M_entedge_out) begin
          M_state_d = DIS_F_state;
        end
        if (M_backedge_out) begin
          M_uR_d = 1'h0;
          M_uG_d = 1'h0;
          M_uB_d = 1'h0;
          M_uC_d = 1'h0;
          M_state_d = CHOOSE_MODE_state;
        end
      end
      DIS_F_state: begin
        if (M_uC_q == 1'h0 && M_uR_q == 1'h1 && M_uG_q == 1'h0 && M_uB_q == 1'h0) begin
          M_rOut_d = M_rOut_q + 1'h1;
        end
        if (M_uC_q == 1'h0 && M_uR_q == 1'h0 && M_uG_q == 1'h1 && M_uB_q == 1'h0) begin
          M_gOut_d = M_gOut_q + 1'h1;
        end
        if (M_uC_q == 1'h0 && M_uR_q == 1'h0 && M_uG_q == 1'h0 && M_uB_q == 1'h1) begin
          M_bOut_d = M_bOut_q + 1'h1;
        end
        if (M_uC_q == 1'h0 && M_uR_q == 1'h1 && M_uG_q == 1'h1 && M_uB_q == 1'h0) begin
          M_yOut_d = M_yOut_q + 1'h1;
        end
        if (M_uC_q == 1'h0 && M_uR_q == 1'h1 && M_uG_q == 1'h0 && M_uB_q == 1'h1) begin
          M_mOut_d = M_mOut_q + 1'h1;
        end
        if (M_uC_q == 1'h0 && M_uR_q == 1'h0 && M_uG_q == 1'h1 && M_uB_q == 1'h1) begin
          M_cOut_d = M_cOut_q + 1'h1;
        end
        if (M_uC_q == 1'h1 && M_uR_q == 1'h1 && M_uG_q == 1'h0 && M_uB_q == 1'h0) begin
          M_cOut_d = M_cOut_q + 1'h1;
        end
        if (M_uC_q == 1'h1 && M_uR_q == 1'h0 && M_uG_q == 1'h1 && M_uB_q == 1'h0) begin
          M_mOut_d = M_mOut_q + 1'h1;
        end
        if (M_uC_q == 1'h1 && M_uR_q == 1'h0 && M_uG_q == 1'h0 && M_uB_q == 1'h1) begin
          M_yOut_d = M_yOut_q + 1'h1;
        end
        if (M_uC_q == 1'h1 && M_uR_q == 1'h1 && M_uG_q == 1'h1 && M_uB_q == 1'h0) begin
          M_bOut_d = M_bOut_q + 1'h1;
        end
        if (M_uC_q == 1'h1 && M_uR_q == 1'h1 && M_uG_q == 1'h0 && M_uB_q == 1'h1) begin
          M_gOut_d = M_gOut_q + 1'h1;
        end
        if (M_uC_q == 1'h1 && M_uR_q == 1'h0 && M_uG_q == 1'h1 && M_uB_q == 1'h1) begin
          M_rOut_d = M_rOut_q + 1'h1;
        end
        M_state_d = DIS_WAIT_state;
      end
      DIS_WAIT_state: begin
        if (M_backedge_out) begin
          M_state_id_d = 1'h0;
          M_rOut_d = 1'h0;
          M_gOut_d = 1'h0;
          M_bOut_d = 1'h0;
          M_yOut_d = 1'h0;
          M_mOut_d = 1'h0;
          M_cOut_d = 1'h0;
          M_uR_d = 1'h0;
          M_uG_d = 1'h0;
          M_uB_d = 1'h0;
          M_uC_d = 1'h0;
          M_state_d = UI_F_state;
        end
      end
      UI_G_START_state: begin
        M_clock_d = M_clock_q + 1'h1;
        if (M_clock_q == 26'h17d783f) begin
          M_gOut_d = M_gOut_q + 1'h1;
          M_bOut_d = M_bOut_q + 1'h1;
          M_yOut_d = M_yOut_q + 1'h1;
          M_mOut_d = M_mOut_q + 1'h1;
          M_cOut_d = M_cOut_q + 1'h1;
        end
        if (M_clock_q == 26'h2faf07f) begin
          M_gOut_d = 1'h0;
          M_bOut_d = 1'h0;
          M_yOut_d = 1'h0;
          M_mOut_d = 1'h0;
          M_cOut_d = 1'h0;
          M_clock_d = 1'h0;
          M_startTimer_d = M_startTimer_q + 1'h1;
          M_aluI_alufn = 6'h33;
          M_aluI_a = M_startTimer_q;
          M_aluI_b = 4'h3;
          alu = M_aluI_alu;
        end
        if (alu == 8'h01) begin
          M_rOut_d = M_rOut_q + 1'h1;
          M_uR_d = 1'h0;
          M_uG_d = 1'h0;
          M_uB_d = 1'h0;
          M_state_id_d = M_state_id_q + 1'h1;
          M_lives_d = M_lives_q + 3'h7;
          M_timer_d = M_timer_q + 5'h1f;
          M_timerScore_d = M_timerScore_q + 3'h5;
          M_startTimer_d = 1'h0;
          M_score_d = 1'h0;
          M_state_d = UI_G_state;
        end
      end
      UI_G_state: begin
        led = 8'h20;
        if (M_redge_out) begin
          M_uR_d = M_uR_q + 1'h1;
        end
        if (M_gedge_out) begin
          M_uG_d = M_uG_q + 1'h1;
        end
        if (M_bedge_out) begin
          M_uB_d = M_uB_q + 1'h1;
        end
        M_clock_d = M_clock_q + 1'h1;
        if (M_clock_q == 26'h2faf07f) begin
          M_clock_d = 1'h0;
          M_timerScore_d = M_timerScore_q - 1'h1;
          M_aluI_alufn = 6'h20;
          M_aluI_a = M_timer_q;
          M_aluI_b = 5'h01;
          alu = M_aluI_alu;
          M_timer_d = alu;
        end
        if (M_timer_q == 5'h00) begin
          M_uIn_d = 1'h0;
          M_state_d = USER_TRANSLATE_state;
        end
        if (clearButt == 1'h1) begin
          M_uR_d = 1'h0;
          M_uG_d = 1'h0;
          M_uB_d = 1'h0;
        end
        if (M_entedge_out) begin
          M_timer_d = 1'h0;
          M_uIn_d = 1'h0;
          M_state_d = USER_TRANSLATE_state;
        end
        if (M_backedge_out) begin
          M_state_id_d = 1'h0;
          M_state_d = RESET_state;
        end
      end
      USER_TRANSLATE_state: begin
        led = 8'h10;
        if (M_uR_q == 1'h0 && M_uG_q == 1'h0 && M_uB_q == 1'h0) begin
          M_uIn_d = 1'h0;
        end
        if (M_uR_q == 1'h1 && M_uG_q == 1'h0 && M_uB_q == 1'h0) begin
          M_uIn_d = M_uIn_q + 3'h4;
        end
        if (M_uR_q == 1'h0 && M_uG_q == 1'h1 && M_uB_q == 1'h0) begin
          M_uIn_d = M_uIn_q + 2'h2;
        end
        if (M_uR_q == 1'h0 && M_uG_q == 1'h0 && M_uB_q == 1'h1) begin
          M_uIn_d = M_uIn_q + 1'h1;
        end
        if (M_uR_q == 1'h1 && M_uG_q == 1'h1 && M_uB_q == 1'h0) begin
          M_uIn_d = M_uIn_q + 3'h6;
        end
        if (M_uR_q == 1'h1 && M_uG_q == 1'h0 && M_uB_q == 1'h1) begin
          M_uIn_d = M_uIn_q + 3'h5;
        end
        if (M_uR_q == 1'h0 && M_uG_q == 1'h1 && M_uB_q == 1'h1) begin
          M_uIn_d = M_uIn_q + 2'h3;
        end
        M_gIn_d = 1'h0;
        M_state_d = COMP_STATE_R_state;
      end
      COMP_CHECK_state: begin
        led = 8'h04;
        M_clock_d = M_clock_q + 1'h1;
        if (M_clock_q == 26'h2faf07f) begin
          M_clock_d = 1'h0;
          M_aluI_alufn = 6'h33;
          M_aluI_a = M_uIn_q;
          M_aluI_b = M_gIn_q;
          alu = M_aluI_alu;
          if (alu == 8'h01) begin
            M_uR_d = 1'h0;
            M_uG_d = 1'h0;
            M_uB_d = 1'h0;
            M_state_d = CHECK_LVL_state;
          end else begin
            M_uR_d = 1'h0;
            M_uG_d = 1'h0;
            M_uB_d = 1'h0;
            M_state_d = D_LIFE_state;
          end
        end
      end
      CHECK_LVL_state: begin
        M_aluI_alufn = 6'h37;
        M_aluI_a = M_state_id_q;
        M_aluI_b = 4'h6;
        alu = M_aluI_alu;
        if (alu == 8'h01) begin
          M_state_d = COMP_MUL_state;
        end else begin
          M_state_d = COMP_MUL2_state;
        end
      end
      COMP_MUL_state: begin
        if (M_timerScore_q == 1'h0) begin
          M_timerScore_d = M_timerScore_q + 1'h1;
        end
        M_aluI_alufn = 6'h02;
        M_aluI_a = 8'h01;
        M_aluI_b = M_timerScore_q;
        alu = M_aluI_alu;
        M_score_d = alu;
        M_state_id_d = M_state_id_q + 1'h1;
        M_state_d = WAIT_state;
      end
      COMP_MUL2_state: begin
        if (M_timerScore_q == 1'h0) begin
          M_timerScore_d = M_timerScore_q + 1'h1;
        end
        M_aluI_alufn = 6'h02;
        M_aluI_a = 8'h02;
        M_aluI_b = M_timerScore_q;
        alu = M_aluI_alu;
        M_score_d = alu;
        M_state_id_d = M_state_id_q + 1'h1;
        M_state_d = WAIT_state;
      end
      WAIT_state: begin
        M_clock_d = M_clock_q + 1'h1;
        if (M_clock_q == 26'h2faf07f) begin
          M_clock_d = 1'h0;
          M_startTimer_d = M_startTimer_q + 1'h1;
          M_aluI_alufn = 6'h33;
          M_aluI_a = M_startTimer_q;
          M_aluI_b = 4'h1;
          alu = M_aluI_alu;
        end
        if (alu == 8'h01) begin
          M_startTimer_d = 1'h0;
          M_state_d = Q_CHECK_state;
        end
      end
      D_LIFE_state: begin
        led = 8'hff;
        M_aluI_alufn = 6'h20;
        M_aluI_a = M_lives_q;
        M_aluI_b = 3'h1;
        alu = M_aluI_alu;
        M_lives_d = alu;
        M_state_d = CHECK_LIFE_state;
      end
      CHECK_LIFE_state: begin
        led = 8'hfe;
        M_aluI_alufn = 6'h33;
        M_aluI_a = M_lives_q;
        M_aluI_b = 3'h0;
        alu = M_aluI_alu;
        if (alu == 8'h01) begin
          M_state_d = RESET_state;
        end else begin
          M_state_id_d = M_state_id_q + 1'h1;
          M_state_d = WAIT_state;
        end
      end
      Q_CHECK_state: begin
        led = 8'h02;
        M_timerScore_d = 1'h0;
        M_timerScore_d = M_timerScore_q + 3'h5;
        M_timer_d = 1'h0;
        M_timer_d = M_timer_q + 5'h1f;
        
        case (M_state_id_q)
          2'h2: begin
            M_rOut_d = 1'h0;
            M_gOut_d = M_gOut_q + 1'h1;
            M_state_d = UI_G_state;
          end
          2'h3: begin
            M_gOut_d = 1'h0;
            M_bOut_d = M_bOut_q + 1'h1;
            M_state_d = UI_G_state;
          end
          3'h4: begin
            M_bOut_d = 1'h0;
            M_yOut_d = M_yOut_q + 1'h1;
            M_state_d = UI_G_state;
          end
          3'h5: begin
            M_yOut_d = 1'h0;
            M_mOut_d = M_mOut_q + 1'h1;
            M_state_d = UI_G_state;
          end
          3'h6: begin
            M_mOut_d = 1'h0;
            M_cOut_d = M_cOut_q + 1'h1;
            M_state_d = UI_G_state;
          end
          3'h7: begin
            M_cOut_d = 1'h0;
            M_rOut_d = M_rOut_q + 1'h1;
            M_cInOut_d = M_cInOut_q + 1'h1;
            M_state_d = UI_G_state;
          end
          4'h8: begin
            M_rOut_d = 1'h0;
            M_gOut_d = M_gOut_q + 1'h1;
            M_state_d = UI_G_state;
          end
          4'h9: begin
            M_gOut_d = 1'h0;
            M_bOut_d = M_bOut_q + 1'h1;
            M_state_d = UI_G_state;
          end
          4'ha: begin
            M_bOut_d = 1'h0;
            M_yOut_d = M_yOut_q + 1'h1;
            M_state_d = UI_G_state;
          end
          4'hb: begin
            M_yOut_d = 1'h0;
            M_mOut_d = M_mOut_q + 1'h1;
            M_state_d = UI_G_state;
          end
          4'hc: begin
            M_mOut_d = 1'h0;
            M_cOut_d = M_cOut_q + 1'h1;
            M_state_d = UI_G_state;
          end
          4'hd: begin
            M_rOut_d = 1'h1;
            M_gOut_d = 1'h1;
            M_bOut_d = 1'h1;
            M_yOut_d = 1'h1;
            M_mOut_d = 1'h1;
            M_cOut_d = 1'h1;
            M_cInOut_d = 1'h1;
            M_state_d = END_state;
          end
        endcase
      end
      COMP_STATE_R_state: begin
        led = 8'h08;
        M_aluI_alufn = 6'h33;
        M_aluI_a = M_state_id_q;
        M_aluI_b = 4'h1;
        alu = M_aluI_alu;
        if (alu == 8'h01) begin
          M_gIn_d = M_gIn_q + 3'h4;
          M_state_d = COMP_CHECK_state;
        end else begin
          M_state_d = COMP_STATE_G_state;
        end
      end
      COMP_STATE_G_state: begin
        led = 8'h01;
        M_aluI_alufn = 6'h33;
        M_aluI_a = M_state_id_q;
        M_aluI_b = 4'h2;
        alu = M_aluI_alu;
        if (alu == 8'h01) begin
          M_gIn_d = M_gIn_q + 2'h2;
          M_state_d = COMP_CHECK_state;
        end else begin
          M_state_d = COMP_STATE_B_state;
        end
      end
      COMP_STATE_B_state: begin
        M_aluI_alufn = 6'h33;
        M_aluI_a = M_state_id_q;
        M_aluI_b = 4'h3;
        alu = M_aluI_alu;
        if (alu == 8'h01) begin
          M_gIn_d = M_gIn_q + 1'h1;
          M_state_d = COMP_CHECK_state;
        end else begin
          M_state_d = COMP_STATE_Y_state;
        end
      end
      COMP_STATE_Y_state: begin
        M_aluI_alufn = 6'h33;
        M_aluI_a = M_state_id_q;
        M_aluI_b = 4'h4;
        alu = M_aluI_alu;
        if (alu == 8'h01) begin
          M_gIn_d = M_gIn_q + 3'h6;
          M_state_d = COMP_CHECK_state;
        end else begin
          M_state_d = COMP_STATE_M_state;
        end
      end
      COMP_STATE_M_state: begin
        M_aluI_alufn = 6'h33;
        M_aluI_a = M_state_id_q;
        M_aluI_b = 4'h5;
        alu = M_aluI_alu;
        if (alu == 8'h01) begin
          M_gIn_d = M_gIn_q + 3'h5;
          M_state_d = COMP_CHECK_state;
        end else begin
          M_state_d = COMP_STATE_C_state;
        end
      end
      COMP_STATE_C_state: begin
        M_aluI_alufn = 6'h33;
        M_aluI_a = M_state_id_q;
        M_aluI_b = 4'h6;
        alu = M_aluI_alu;
        if (alu == 8'h01) begin
          M_gIn_d = M_gIn_q + 2'h3;
          M_state_d = COMP_CHECK_state;
        end else begin
          M_state_d = COMP_STATE_0R_state;
        end
      end
      COMP_STATE_0R_state: begin
        M_aluI_alufn = 6'h33;
        M_aluI_a = M_state_id_q;
        M_aluI_b = 4'h7;
        alu = M_aluI_alu;
        if (alu == 8'h01) begin
          M_gIn_d = M_gIn_q + 2'h3;
          M_state_d = COMP_CHECK_state;
        end else begin
          M_state_d = COMP_STATE_0G_state;
        end
      end
      COMP_STATE_0G_state: begin
        M_aluI_alufn = 6'h33;
        M_aluI_a = M_state_id_q;
        M_aluI_b = 4'h8;
        alu = M_aluI_alu;
        if (alu == 8'h01) begin
          M_gIn_d = M_gIn_q + 3'h5;
          M_state_d = COMP_CHECK_state;
        end else begin
          M_state_d = COMP_STATE_0B_state;
        end
      end
      COMP_STATE_0B_state: begin
        M_aluI_alufn = 6'h33;
        M_aluI_a = M_state_id_q;
        M_aluI_b = 4'h9;
        alu = M_aluI_alu;
        if (alu == 8'h01) begin
          M_gIn_d = M_gIn_q + 3'h6;
          M_state_d = COMP_CHECK_state;
        end else begin
          M_state_d = COMP_STATE_0Y_state;
        end
      end
      COMP_STATE_0Y_state: begin
        M_aluI_alufn = 6'h33;
        M_aluI_a = M_state_id_q;
        M_aluI_b = 4'ha;
        alu = M_aluI_alu;
        if (alu == 8'h01) begin
          M_gIn_d = M_gIn_q + 1'h1;
          M_state_d = COMP_CHECK_state;
        end else begin
          M_state_d = COMP_STATE_0M_state;
        end
      end
      COMP_STATE_0M_state: begin
        M_aluI_alufn = 6'h33;
        M_aluI_a = M_state_id_q;
        M_aluI_b = 4'hb;
        alu = M_aluI_alu;
        if (alu == 8'h01) begin
          M_gIn_d = M_gIn_q + 2'h2;
          M_state_d = COMP_CHECK_state;
        end else begin
          M_state_d = COMP_STATE_0C_state;
        end
      end
      COMP_STATE_0C_state: begin
        M_aluI_alufn = 6'h33;
        M_aluI_a = M_state_id_q;
        M_aluI_b = 4'hc;
        alu = M_aluI_alu;
        if (alu == 8'h01) begin
          M_gIn_d = M_gIn_q + 3'h4;
          M_state_d = COMP_CHECK_state;
        end else begin
          M_state_d = END_state;
        end
      end
      RESET_state: begin
        M_rOut_d = 1'h0;
        M_gOut_d = 1'h0;
        M_bOut_d = 1'h0;
        M_yOut_d = 1'h0;
        M_mOut_d = 1'h0;
        M_cOut_d = 1'h0;
        M_cInOut_d = 1'h0;
        M_uR_d = 1'h0;
        M_uG_d = 1'h0;
        M_uB_d = 1'h0;
        M_uC_d = 1'h0;
        M_state_id_d = 1'h0;
        M_state_d = END_state;
      end
      END_state: begin
        led = 8'h55;
        M_clock_d = M_clock_q + 1'h1;
        if (M_clock_q == 26'h2faf07f) begin
          M_rOut_d = M_rOut_q + 1'h1;
          M_gOut_d = M_gOut_q + 1'h1;
          M_bOut_d = M_bOut_q + 1'h1;
          M_yOut_d = M_yOut_q + 1'h1;
          M_mOut_d = M_mOut_q + 1'h1;
          M_cOut_d = M_cOut_q + 1'h1;
          M_idleOut_d = M_idleOut_q + 1'h1;
          M_state_d = END_2_state;
        end
        if (M_entedge_out || M_backedge_out) begin
          M_clock_d = 1'h0;
          M_rOut_d = 1'h0;
          M_gOut_d = 1'h0;
          M_bOut_d = 1'h0;
          M_yOut_d = 1'h0;
          M_mOut_d = 1'h0;
          M_cOut_d = 1'h0;
          M_cInOut_d = 1'h0;
          M_uR_d = 1'h0;
          M_uG_d = 1'h0;
          M_uB_d = 1'h0;
          M_uC_d = 1'h0;
          M_state_id_d = 1'h0;
          M_lives_d = 1'h0;
          M_timer_d = 1'h0;
          M_score_d = 1'h0;
          M_timerScore_d = 1'h0;
          M_state_d = CHOOSE_MODE_state;
        end
      end
      END_2_state: begin
        led = 8'haa;
        M_clock_d = M_clock_q + 1'h1;
        if (M_clock_q == 26'h2faf07f) begin
          M_rOut_d = 1'h0;
          M_gOut_d = 1'h0;
          M_bOut_d = 1'h0;
          M_yOut_d = 1'h0;
          M_mOut_d = 1'h0;
          M_cOut_d = 1'h0;
          M_cInOut_d = 1'h0;
          M_idleOut_d = M_idleOut_q + 1'h1;
          M_state_d = END_state;
        end
        if (M_entedge_out || M_backedge_out) begin
          M_clock_d = 1'h0;
          M_rOut_d = 1'h0;
          M_gOut_d = 1'h0;
          M_bOut_d = 1'h0;
          M_yOut_d = 1'h0;
          M_mOut_d = 1'h0;
          M_cOut_d = 1'h0;
          M_cInOut_d = 1'h0;
          M_uR_d = 1'h0;
          M_uG_d = 1'h0;
          M_uB_d = 1'h0;
          M_uC_d = 1'h0;
          M_state_id_d = 1'h0;
          M_lives_d = 1'h0;
          M_timer_d = 1'h0;
          M_score_d = 1'h0;
          M_timerScore_d = 1'h0;
          M_state_d = CHOOSE_MODE_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_uC_q <= 1'h0;
      M_uR_q <= 1'h0;
      M_uG_q <= 1'h0;
      M_uB_q <= 1'h0;
      M_uIn_q <= 1'h0;
      M_gIn_q <= 1'h0;
      M_rOut_q <= 1'h0;
      M_gOut_q <= 1'h0;
      M_bOut_q <= 1'h0;
      M_yOut_q <= 1'h0;
      M_mOut_q <= 1'h0;
      M_cOut_q <= 1'h0;
      M_cInOut_q <= 1'h0;
      M_idleOut_q <= 1'h0;
      M_timer_q <= 1'h0;
      M_startTimer_q <= 1'h0;
      M_timerScore_q <= 1'h0;
      M_score_q <= 1'h0;
      M_lives_q <= 1'h0;
      M_clock_q <= 1'h0;
      M_state_id_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_uC_q <= M_uC_d;
      M_uR_q <= M_uR_d;
      M_uG_q <= M_uG_d;
      M_uB_q <= M_uB_d;
      M_uIn_q <= M_uIn_d;
      M_gIn_q <= M_gIn_d;
      M_rOut_q <= M_rOut_d;
      M_gOut_q <= M_gOut_d;
      M_bOut_q <= M_bOut_d;
      M_yOut_q <= M_yOut_d;
      M_mOut_q <= M_mOut_d;
      M_cOut_q <= M_cOut_d;
      M_cInOut_q <= M_cInOut_d;
      M_idleOut_q <= M_idleOut_d;
      M_timer_q <= M_timer_d;
      M_startTimer_q <= M_startTimer_d;
      M_timerScore_q <= M_timerScore_d;
      M_score_q <= M_score_d;
      M_lives_q <= M_lives_d;
      M_clock_q <= M_clock_d;
      M_state_id_q <= M_state_id_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
